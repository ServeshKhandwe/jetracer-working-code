// Generated by gencpp from file custom_msgs/ChatPromptRequest.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSGS_MESSAGE_CHATPROMPTREQUEST_H
#define CUSTOM_MSGS_MESSAGE_CHATPROMPTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msgs
{
template <class ContainerAllocator>
struct ChatPromptRequest_
{
  typedef ChatPromptRequest_<ContainerAllocator> Type;

  ChatPromptRequest_()
    : prompt()  {
    }
  ChatPromptRequest_(const ContainerAllocator& _alloc)
    : prompt(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _prompt_type;
  _prompt_type prompt;





  typedef boost::shared_ptr< ::custom_msgs::ChatPromptRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::ChatPromptRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ChatPromptRequest_

typedef ::custom_msgs::ChatPromptRequest_<std::allocator<void> > ChatPromptRequest;

typedef boost::shared_ptr< ::custom_msgs::ChatPromptRequest > ChatPromptRequestPtr;
typedef boost::shared_ptr< ::custom_msgs::ChatPromptRequest const> ChatPromptRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msgs::ChatPromptRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msgs::ChatPromptRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msgs::ChatPromptRequest_<ContainerAllocator1> & lhs, const ::custom_msgs::ChatPromptRequest_<ContainerAllocator2> & rhs)
{
  return lhs.prompt == rhs.prompt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msgs::ChatPromptRequest_<ContainerAllocator1> & lhs, const ::custom_msgs::ChatPromptRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::ChatPromptRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::ChatPromptRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::ChatPromptRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::ChatPromptRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::ChatPromptRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::ChatPromptRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::ChatPromptRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d0b05839404bd41adf8ff6cbb733e1fe";
  }

  static const char* value(const ::custom_msgs::ChatPromptRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd0b05839404bd41aULL;
  static const uint64_t static_value2 = 0xdf8ff6cbb733e1feULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::ChatPromptRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/ChatPromptRequest";
  }

  static const char* value(const ::custom_msgs::ChatPromptRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::ChatPromptRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string prompt\n"
;
  }

  static const char* value(const ::custom_msgs::ChatPromptRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msgs::ChatPromptRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.prompt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChatPromptRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::ChatPromptRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msgs::ChatPromptRequest_<ContainerAllocator>& v)
  {
    s << indent << "prompt: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.prompt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_CHATPROMPTREQUEST_H
